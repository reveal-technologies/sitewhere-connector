/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.sitewhere.mule;

import javax.inject.Inject;

import org.apache.log4j.Logger;
import org.mule.api.MuleContext;
import org.mule.api.MuleEvent;
import org.mule.api.MuleException;
import org.mule.api.annotations.Config;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.Source;
import org.mule.api.callback.SourceCallback;

import com.hazelcast.core.ITopic;
import com.hazelcast.core.Message;
import com.hazelcast.core.MessageListener;
import com.sitewhere.rest.model.SiteWhereContext;
import com.sitewhere.rest.model.device.event.DeviceAlert;
import com.sitewhere.rest.model.device.event.DeviceCommandInvocation;
import com.sitewhere.rest.model.device.event.DeviceCommandResponse;
import com.sitewhere.rest.model.device.event.DeviceLocation;
import com.sitewhere.rest.model.device.event.DeviceMeasurements;
import com.sitewhere.spi.ISiteWhereContext;
import com.sitewhere.spi.SiteWhereException;
import com.sitewhere.spi.device.IDeviceAssignment;
import com.sitewhere.spi.device.event.IDeviceEvent;
import com.sitewhere.spi.server.hazelcast.ISiteWhereHazelcast;

/**
 * Allows SiteWhere REST operations to be executed from within a Mule flow.
 * 
 * @author Derek Adams
 */
@Connector(name = "sitewhere", schemaVersion = "1.4.0", friendlyName = "SiteWhere")
public class SiteWhereConnector {

	/** Static logger instance */
	private static Logger LOGGER = Logger.getLogger(SiteWhereConnector.class);

	/** Flow variable name for SiteWhere context */
	private static final String SITEWHERE_CONTEXT = "com.sitewhere.mule.SITEWHERE_CONTEXT";

	/** Used to log SiteWhereContext to console */
	private SiteWhereContextLogger contextLogger = new SiteWhereContextLogger();

	/** Connector configuration */
	@Config
	ConnectorConfiguration configuration;

	@Inject
	private MuleContext muleContext;

	/**
	 * Builds an {@link ISiteWhereContext} around the {@link IDeviceEvent} in the current
	 * payload. Looks up details for the assignment associated with the event including
	 * detailed device information.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml
	 * sitewhere:build-context-for-event}
	 * 
	 * @param event
	 *            injected Mule event
	 * @return the event after processing.
	 * @throws SiteWhereException
	 *             if no SiteWhere context is in expected flow variable
	 */
	@Processor()
	public MuleEvent buildContextForEvent(MuleEvent event) throws SiteWhereException {
		if (event.getMessage().getPayload() instanceof IDeviceEvent) {
			IDeviceEvent de = (IDeviceEvent) event.getMessage().getPayload();
			SiteWhereContext context = new SiteWhereContext();
			IDeviceAssignment assignment =
					getConfiguration().getAssignmentByToken(de.getDeviceAssignmentToken());
			context.setDeviceAssignment(assignment);
			context.addDeviceEvent(de);
			event.setFlowVariable(SITEWHERE_CONTEXT, context);
			return event;
		} else {
			throw new SiteWhereException("Payload does not implement " + IDeviceEvent.class.getName());
		}
	}

	/**
	 * Logs information about the current SiteWhere context to the console.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml sitewhere:log-sitewhere-context}
	 * 
	 * @param event
	 *            injected Mule event
	 * @return the event after processing.
	 */
	@Processor()
	public MuleEvent logSitewhereContext(MuleEvent event) {
		try {
			ISiteWhereContext context = getSiteWhereContext(event);
			try {
				contextLogger.showDebugOutput(context);
			} catch (Throwable e) {
				LOGGER.error("Unable to marshal SiteWhere context information.", e);
			}
			return event;
		} catch (SiteWhereException e) {
			LOGGER.error(e);
			return event;
		}
	}

	/**
	 * Subscribes to Hazelcast measurements device events from SiteWhere for processing in
	 * Mule.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml sitewhere:subscribe-measurements}
	 * 
	 * @param callback
	 *            needed to generate new Mule messages
	 * @throws MuleException
	 *             if not able to connect to Hazelcast.
	 */
	@Source
	public void subscribeMeasurements(final SourceCallback callback) throws MuleException {
		if (configuration.isConnected()) {
			ITopic<DeviceMeasurements> topic =
					configuration.getHazelcast().getTopic(ISiteWhereHazelcast.TOPIC_MEASUREMENTS_ADDED);
			topic.addMessageListener(new MeasurementsEventListener(callback));
			LOGGER.info("Registered for device measurement events from SiteWhere.");
		} else {
			LOGGER.error("Unable to subscribe to measurements. Not connected.");
		}
	}

	/**
	 * Handles inbound measurements events.
	 * 
	 * @author Derek
	 */
	private class MeasurementsEventListener implements MessageListener<DeviceMeasurements> {

		/** Used to put data on the bus */
		private SourceCallback callback;

		public MeasurementsEventListener(SourceCallback callback) {
			this.callback = callback;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see com.hazelcast.core.MessageListener#onMessage(com.hazelcast.core.Message)
		 */
		@Override
		public void onMessage(Message<DeviceMeasurements> message) {
			DeviceMeasurements measurements = message.getMessageObject();
			try {
				LOGGER.debug("Received measurements for: " + measurements.getId());
				callback.process(measurements);
			} catch (Exception e) {
				LOGGER.error("Unable to process measurements device event.", e);
			}
		}
	}

	/**
	 * Subscribes to Hazelcast location device events from SiteWhere for processing in
	 * Mule.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml sitewhere:subscribe-locations}
	 * 
	 * @param callback
	 *            needed to generate new Mule messages
	 * @throws MuleException
	 *             if not able to connect to Hazelcast.
	 */
	@Source
	public void subscribeLocations(final SourceCallback callback) throws MuleException {
		if (configuration.isConnected()) {
			ITopic<DeviceLocation> topic =
					configuration.getHazelcast().getTopic(ISiteWhereHazelcast.TOPIC_LOCATION_ADDED);
			topic.addMessageListener(new LocationsEventListener(callback));
			LOGGER.info("Registered for device location events from SiteWhere.");
		} else {
			LOGGER.error("Unable to subscribe to locations. Not connected.");
		}
	}

	/**
	 * Handles inbound location events.
	 * 
	 * @author Derek
	 */
	private class LocationsEventListener implements MessageListener<DeviceLocation> {

		/** Used to put data on the bus */
		private SourceCallback callback;

		public LocationsEventListener(SourceCallback callback) {
			this.callback = callback;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see com.hazelcast.core.MessageListener#onMessage(com.hazelcast.core.Message)
		 */
		@Override
		public void onMessage(Message<DeviceLocation> message) {
			DeviceLocation location = message.getMessageObject();
			try {
				LOGGER.debug("Received location for: " + location.getId());
				callback.process(location);
			} catch (Exception e) {
				LOGGER.error("Unable to process location device event.", e);
			}
		}
	}

	/**
	 * Subscribes to Hazelcast {@link DeviceAlert} events from SiteWhere for processing in
	 * Mule.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml sitewhere:subscribe-alerts}
	 * 
	 * @param callback
	 *            needed to generate new Mule messages
	 * @throws MuleException
	 *             if not able to connect to Hazelcast.
	 */
	@Source
	public void subscribeAlerts(final SourceCallback callback) throws MuleException {
		if (configuration.isConnected()) {
			ITopic<DeviceAlert> topic =
					configuration.getHazelcast().getTopic(ISiteWhereHazelcast.TOPIC_ALERT_ADDED);
			topic.addMessageListener(new AlertsEventListener(callback));
			LOGGER.info("Registered for device alert events from SiteWhere.");
		} else {
			LOGGER.error("Unable to subscribe to alerts. Not connected.");
		}
	}

	/**
	 * Handles inbound alert events.
	 * 
	 * @author Derek
	 */
	private class AlertsEventListener implements MessageListener<DeviceAlert> {

		/** Used to put data on the bus */
		private SourceCallback callback;

		public AlertsEventListener(SourceCallback callback) {
			this.callback = callback;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see com.hazelcast.core.MessageListener#onMessage(com.hazelcast.core.Message)
		 */
		@Override
		public void onMessage(Message<DeviceAlert> message) {
			DeviceAlert alert = message.getMessageObject();
			try {
				LOGGER.debug("Received alert for: " + alert.getId());
				callback.process(alert);
			} catch (Exception e) {
				LOGGER.error("Unable to process alert device event.", e);
			}
		}
	}

	/**
	 * Subscribes to Hazelcast {@link DeviceCommandInvocation} events from SiteWhere for
	 * processing in Mule.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml
	 * sitewhere:subscribe-command-invocations}
	 * 
	 * @param callback
	 *            needed to generate new Mule messages
	 * @throws MuleException
	 *             if not able to connect to Hazelcast.
	 */
	@Source
	public void subscribeCommandInvocations(final SourceCallback callback) throws MuleException {
		if (configuration.isConnected()) {
			ITopic<DeviceCommandInvocation> topic =
					configuration.getHazelcast().getTopic(ISiteWhereHazelcast.TOPIC_COMMAND_INVOCATION_ADDED);
			topic.addMessageListener(new CommandInvocationsEventListener(callback));
			LOGGER.info("Registered for device commmand invocation events from SiteWhere.");
		} else {
			LOGGER.error("Unable to subscribe to commmand invocations. Not connected.");
		}
	}

	/**
	 * Handles inbound {@link DeviceCommandInvocation} events.
	 * 
	 * @author Derek
	 */
	private class CommandInvocationsEventListener implements MessageListener<DeviceCommandInvocation> {

		/** Used to put data on the bus */
		private SourceCallback callback;

		public CommandInvocationsEventListener(SourceCallback callback) {
			this.callback = callback;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see com.hazelcast.core.MessageListener#onMessage(com.hazelcast.core.Message)
		 */
		@Override
		public void onMessage(Message<DeviceCommandInvocation> message) {
			DeviceCommandInvocation invocation = message.getMessageObject();
			try {
				LOGGER.debug("Received command invocation for: " + invocation.getId());
				callback.process(invocation);
			} catch (Exception e) {
				LOGGER.error("Unable to process device command invocation event.", e);
			}
		}
	}

	/**
	 * Subscribes to Hazelcast {@link DeviceCommandResponse} events from SiteWhere for
	 * processing in Mule.
	 * 
	 * {@sample.xml ../../../doc/sitewhere-connector.xml
	 * sitewhere:subscribe-command-responses}
	 * 
	 * @param callback
	 *            needed to generate new Mule messages
	 * @throws MuleException
	 *             if not able to connect to Hazelcast.
	 */
	@Source
	public void subscribeCommandResponses(final SourceCallback callback) throws MuleException {
		if (configuration.isConnected()) {
			ITopic<DeviceCommandResponse> topic =
					configuration.getHazelcast().getTopic(ISiteWhereHazelcast.TOPIC_COMMAND_RESPONSE_ADDED);
			topic.addMessageListener(new CommandResponsesEventListener(callback));
			LOGGER.info("Registered for device commmand response events from SiteWhere.");
		} else {
			LOGGER.error("Unable to subscribe to commmand responses. Not connected.");
		}
	}

	/**
	 * Handles inbound {@link DeviceCommandResponse} events.
	 * 
	 * @author Derek
	 */
	private class CommandResponsesEventListener implements MessageListener<DeviceCommandResponse> {

		/** Used to put data on the bus */
		private SourceCallback callback;

		public CommandResponsesEventListener(SourceCallback callback) {
			this.callback = callback;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see com.hazelcast.core.MessageListener#onMessage(com.hazelcast.core.Message)
		 */
		@Override
		public void onMessage(Message<DeviceCommandResponse> message) {
			DeviceCommandResponse response = message.getMessageObject();
			try {
				LOGGER.debug("Received command response for: " + response.getId());
				callback.process(response);
			} catch (Exception e) {
				LOGGER.error("Unable to process device command response event.", e);
			}
		}
	}

	/**
	 * Get the SiteWhereContext from a pre-determined flow variable or message payload.
	 * 
	 * @param event
	 * @return
	 * @throws SiteWhereException
	 */
	protected ISiteWhereContext getSiteWhereContext(MuleEvent event) throws SiteWhereException {
		ISiteWhereContext context = (ISiteWhereContext) event.getFlowVariable(SITEWHERE_CONTEXT);
		if (context == null) {
			Object payload = event.getMessage().getPayload();
			if (payload instanceof ISiteWhereContext) {
				context = (ISiteWhereContext) payload;
			}
		}
		if (context == null) {
			throw new SiteWhereException(
					"SiteWhereContext not found in expected flow variable or message payload.");
		}
		return context;
	}

	public MuleContext getMuleContext() {
		return muleContext;
	}

	public void setMuleContext(MuleContext muleContext) {
		this.muleContext = muleContext;
	}

	public ConnectorConfiguration getConfiguration() {
		return configuration;
	}

	public void setConfiguration(ConnectorConfiguration configuration) {
		this.configuration = configuration;
	}
}